import numpy as np                               # vectors and matrices
import pandas as pd                              # tables and data manipulations
import matplotlib.pyplot as plt                  # plots
import seaborn as sns                            # more plots
from dateutil.relativedelta import relativedelta # working with dates with style
from scipy.optimize import minimize
import statsmodels.formula.api as smf            # statistics and econometrics
import statsmodels.tsa.api as smt
import statsmodels.api as sm
import scipy.stats as scs

from itertools import product                    # some useful functions
from tqdm import tqdm_notebook

import warnings                                  # `do not disturbe` mode
warnings.filterwarnings('ignore')

air= pd.read_csv('air_quality/AirQualityUCI.csv',sep=";")

air = air.drop(['Unnamed: 15', 'Unnamed: 16'], axis=1)
air = air.dropna()
air.shape

air.loc[:,'Datetime'] = air['Date'] + ' ' + air['Time']

air.isnull().sum()

air.dtypes

air.Datetime.head(1)

air['mydate']=pd.to_datetime(air['Datetime'],format='%d/%m/%Y %H.%M.%S')

from datetime import datetime
DateTime = []
for x in air['Datetime']:
    DateTime.append(datetime.strptime(x,'%d/%m/%Y %H.%M.%S'))

datetime = pd.Series(DateTime)
air.index = datetime

# ads = pd.read_csv('../../data/ads.csv', index_col=['Time'], parse_dates=['Time'])
# currency = pd.read_csv('../../data/currency.csv', index_col=['Time'], parse_dates=['Time'])

plt.figure(figsize=(15, 7))
plt.plot(air['PT08.S1(CO)'].head(100))
plt.title('hourly pt08')
plt.grid(True)
plt.show()

# plt.figure(figsize=(15, 7))
# plt.plot(currency.GEMS_GEMS_SPENT)
# plt.title('In-game currency spent (daily data)')
# plt.grid(True)
# plt.show()


S1 = air['PT08.S1(CO)'].fillna(air['PT08.S1(CO)'].mean())
S2 = air['PT08.S2(NMHC)'].fillna(air['PT08.S1(CO)'].mean())
S3 = air['PT08.S3(NOx)'].fillna(air['PT08.S1(CO)'].mean())
S4 = air['PT08.S4(NO2)'].fillna(air['PT08.S1(CO)'].mean())
S5 = air['PT08.S5(O3)'].fillna(air['PT08.S1(CO)'].mean())

%matplotlib inline

fig, axes = plt.subplots(5,1, figsize=(15,24))

axes[0].plot(S1)
axes[0].set_title ('S1')
axes[1].plot(S2)
axes[1].set_title ('S2')
axes[2].plot(S3)
axes[2].set_title ('S3')
axes[3].plot(S4)
axes[3].set_title ('S4')
axes[4].plot(S5)
axes[4].set_title ('S5')

# Importing everything from above

from sklearn.metrics import r2_score, median_absolute_error, mean_absolute_error
from sklearn.metrics import median_absolute_error, mean_squared_error, mean_squared_log_error

def mean_absolute_percentage_error(y_true, y_pred): 
    return np.mean(np.abs((y_true - y_pred) / y_true)) * 100


def moving_average(series, n):
    """
        Calculate average of last n observations
    """
    return np.average(series[-n:])

moving_average(air['NOx(GT)'], 24) # prediction for the last observed day (past 24 hours)

def plotMovingAverage(series, window, plot_intervals=False, scale=1.96, plot_anomalies=False):

    """
        series - dataframe with timeseries
        window - rolling window size 
        plot_intervals - show confidence intervals
        plot_anomalies - show anomalies 
    """
    rolling_mean = series.rolling(window=window).mean()

    plt.figure(figsize=(15,5))
    plt.title("Moving average\n window size = {}".format(window))
    plt.plot(rolling_mean, "g", label="Rolling mean trend")

    # Plot confidence intervals for smoothed values
    if plot_intervals:
        mae = mean_absolute_error(series[window:], rolling_mean[window:])
        deviation = np.std(series[window:] - rolling_mean[window:])
        lower_bond = rolling_mean - (mae + scale * deviation)
        upper_bond = rolling_mean + (mae + scale * deviation)
        plt.plot(upper_bond, "r--", label="Upper Bond / Lower Bond")
        plt.plot(lower_bond, "r--")
        
        # Having the intervals, find abnormal values
        if plot_anomalies:
            anomalies = pd.DataFrame(index=series.index, columns=series.columns)
            anomalies[series<lower_bond] = series[series<lower_bond]
            anomalies[series>upper_bond] = series[series>upper_bond]
            plt.plot(anomalies, "ro", markersize=10)
        
    plt.plot(series[window:], label="Actual values")
    plt.legend(loc="upper left")
    plt.grid(True)

air.head(1)

sample=200
plotMovingAverage(air['NOx(GT)'].head(sample), 24*7)

def exponential_smoothing(series, alpha):
    """
        series - dataset with timestamps
        alpha - float [0.0, 1.0], smoothing parameter
    """
    result = [series[0]] # first value is same as series
    for n in range(1, len(series)):
        result.append(alpha * series[n] + (1 - alpha) * result[n-1])
    return result
    
def plotExponentialSmoothing(series, alphas):
    """
        Plots exponential smoothing with different alphas
        
        series - dataset with timestamps
        alphas - list of floats, smoothing parameters
        
    """
    with plt.style.context('seaborn-white'):    
        plt.figure(figsize=(15, 7))
        for alpha in alphas:
            plt.plot(exponential_smoothing(series, alpha), label="Alpha {}".format(alpha))
        plt.plot(series.values, "c", label = "Actual")
        plt.legend(loc="best")
        plt.axis('tight')
        plt.title("Exponential Smoothing")
        plt.grid(True);

plotExponentialSmoothing(air['NOx(GT)'].head(sample), [0.3, 0.05])
# plotExponentialSmoothing(currency.GEMS_GEMS_SPENT, [0.3, 0.05])


air.head()
